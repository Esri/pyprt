#!/usr/bin/env groovy

// This pipeline is designed to run on Esri-internal CI infrastructure.


// -- PIPELINE LIBRARIES

@Library('psl')
import com.esri.zrh.jenkins.PipelineSupportLibrary
import com.esri.zrh.jenkins.JenkinsTools
import com.esri.zrh.jenkins.ce.CityEnginePipelineLibrary
import com.esri.zrh.jenkins.ce.PrtAppPipelineLibrary
import com.esri.zrh.jenkins.PslFactory
import com.esri.zrh.jenkins.psl.DefaultPsl
import groovy.transform.Field

@Field def psl = PslFactory.create(this, DefaultPsl.ID)
@Field def cepl = new CityEnginePipelineLibrary(this, psl)
@Field def papl = new PrtAppPipelineLibrary(cepl)


// -- SETUP

properties([
	disableConcurrentBuilds()
])

psl.runsHere('production')


// -- GLOBAL DEFINITIONS

@Field final String DOCKER_REGISTRY  = 'zrh-dreg-sp-1.esri.com'
@Field final String DOCKER_PROJECT   = "${DOCKER_REGISTRY}/pyprt/"
@Field final String DOCKER_IMAGE_REV = 'v8' // target revision of the generated images

@Field final String REPO   = 'git@github.com:esri/pyprt.git'
@Field final String SOURCE = 'pyprt.git'
@Field final String CREDS = 'jenkins-devtopia-pyprt-deployer-key'
@Field final String SOURCE_STASH = 'pyprt-sources'

@Field final String DOCKER_AGENT_LINUX = 'centos7-64-d'
@Field final String DOCKER_AGENT_WINDOWS = 'win19-64-d'

@Field final Map PY37 = [ py: '3.7' ]
@Field final Map PY38 = [ py: '3.8' ]
@Field final Map PY39 = [ py: '3.9' ]
@Field final Map PY310 = [ py: '3.10' ]

@Field final Map BASE = [ kind: 'base' ]
@Field final Map WHEEL = [ kind: 'wheel' ]
@Field final Map CONDA = [ kind: 'conda' ]

@Field final String OS_LINUX = 'linux'
@Field final String OS_WINDOWS = 'windows'

@Field final Map LINUX_TOOLCHAIN   = [ ba: DOCKER_AGENT_LINUX,   os: OS_LINUX, tc: cepl.CFG_TC_GCC93 ]
@Field final Map WINDOWS_TOOLCHAIN = [ ba: DOCKER_AGENT_WINDOWS, os: OS_WINDOWS, tc: cepl.CFG_TC_VC1427 ]

@Field final List CONFIGS_PREPARE    = [
	LINUX_TOOLCHAIN,
]
@Field final List CONFIGS_BASE_IMAGES = [
	composeConfig(null, BASE, LINUX_TOOLCHAIN),
	composeConfig(null, BASE, WINDOWS_TOOLCHAIN),
	composeConfig(PY37, BASE, WINDOWS_TOOLCHAIN),
	composeConfig(PY38, BASE, WINDOWS_TOOLCHAIN),
	composeConfig(PY39, BASE, WINDOWS_TOOLCHAIN),
	composeConfig(PY310, BASE, WINDOWS_TOOLCHAIN),
]
@Field final List CONFIGS_IMAGES = [
	composeConfig(PY37, WHEEL, WINDOWS_TOOLCHAIN),
	composeConfig(PY37, CONDA, LINUX_TOOLCHAIN),
	composeConfig(PY37, CONDA, WINDOWS_TOOLCHAIN),
	composeConfig(PY38, WHEEL, LINUX_TOOLCHAIN),
	composeConfig(PY38, WHEEL, WINDOWS_TOOLCHAIN),
	composeConfig(PY38, CONDA, LINUX_TOOLCHAIN),
	composeConfig(PY38, CONDA, WINDOWS_TOOLCHAIN),
	composeConfig(PY39, WHEEL, LINUX_TOOLCHAIN),
	composeConfig(PY39, WHEEL, WINDOWS_TOOLCHAIN),
	composeConfig(PY39, CONDA, LINUX_TOOLCHAIN),
	composeConfig(PY39, CONDA, WINDOWS_TOOLCHAIN),
	composeConfig(PY310, WHEEL, LINUX_TOOLCHAIN),
	composeConfig(PY310, WHEEL, WINDOWS_TOOLCHAIN),
	composeConfig(PY310, CONDA, LINUX_TOOLCHAIN),
	composeConfig(PY310, CONDA, WINDOWS_TOOLCHAIN),
]


// -- PIPELINE

stage('prepare') {
	cepl.runParallel(taskGenPrepare())
}

stage('build-base-images') {
	//cepl.runParallel(taskGenBuildDockerBaseImage())
}

stage('build-images') {
	cepl.runParallel(taskGenBuildDockerImage())
}


// -- TASK GENERATORS

Map taskGenPrepare() {
	Map tasks = [:]
	tasks << cepl.generateTasks('prepare', this.&taskPrepare, CONFIGS_PREPARE)
	return tasks
}

Map taskGenBuildDockerBaseImage() {
	Map tasks = [:]
  	tasks << cepl.generateTasks('image', this.&taskBuildDockerImage, CONFIGS_BASE_IMAGES)
	return tasks;
}

Map taskGenBuildDockerImage() {
	Map tasks = [:]
  	tasks << cepl.generateTasks('image', this.&taskBuildDockerImage, CONFIGS_IMAGES)
	return tasks;
}


// -- TASK BUILDERS

def taskPrepare(cfg) {
 	cepl.cleanCurrentDir()
	papl.checkout(REPO, env.BRANCH_NAME, CREDS)
	stash(name: SOURCE_STASH)
}

def taskBuildDockerImage(cfg) {
	cepl.cleanCurrentDir()
	unstash(name: SOURCE_STASH)

	final String dockerFile = getDockerFile(cfg)
	final String image = getDockerImage(cfg)
	final String tag = getDockerTag(cfg)
	final String buildArgs = getBuildArgs(cfg)
	final String targetArgs = getTargetArgs(cfg)

	final String buildLabel = "build=${tag}-${BUILD_ID}"
	final String labelArgs = "--label ${buildLabel}"

	dir(path: SOURCE) {
		docker.withRegistry("https://${DOCKER_REGISTRY}", 'jenkins-pyprt-dreg-robot') {
			psl.runContainerBuild() {
				def dockerImage = docker.build(image, "-m 8GB --rm -f ${dockerFile} ${buildArgs} ${labelArgs} ${targetArgs} .")
				dockerImage.push(tag)
				psl.runCmd("docker image prune -a -f --filter label=${buildLabel}")
			}
		}
	}
}


// -- HELPERS

@NonCPS
Map composeConfig(py, kind, tc) {
	if (py != null)
		return py + kind + tc + [ grp: "py${py['py']}-${kind['kind']}" ]
	else
		return kind + tc + [ grp: "${kind['kind']}" ]
}

String getDockerFile(cfg) {
	String path = "envs/${cfg.os}/${cfg.kind}/Dockerfile"
	if ((cfg.py == PY39.py || cfg.py == PY310.py) && cfg.os == OS_LINUX && cfg.kind == WHEEL.kind)
		path += '-custom-py' // workaround: no Python 3.9 or 3.10 RPMs available
	else if (cfg.py != null && cfg.kind == BASE.kind)
		path += '-py' // base images from pre-built python images
	return path
}

String getDockerImage(cfg) {
	return DOCKER_PROJECT + ((cfg.kind == BASE.kind) ? 'pyprt-base' : 'pyprt')
}

String getDockerBaseTag(cfg) {
	return "jnk-${DOCKER_IMAGE_REV}-${cfg.os}"
}

String getDockerTag(cfg) {
	String tag = getDockerBaseTag(cfg)
	if (cfg.py != null)
		tag += "-py${cfg.py}"
	if (cfg.kind != BASE.kind)
		tag += "-${cfg.kind}-${cfg.tc}"
	return tag
}

String getBuildArgs(cfg) {
	String args = ''
	String base_tag = getDockerBaseTag(cfg)
	if (cfg.kind != BASE.kind)
		args += " --build-arg REGISTRY=${DOCKER_PROJECT} --build-arg BASE_TAG=${base_tag}"
	if (cfg.py != null)
		args += " --build-arg PY_VER=${cfg.py}"

    // specify the exact python version to build on linux for the wheels
	if (cfg.os == OS_LINUX && cfg.kind == WHEEL.kind && cfg.py == PY39.py)
		args += " --build-arg PY_VER_MICRO=.13"
	else if (cfg.os == OS_LINUX && cfg.kind == WHEEL.kind && cfg.py == PY310.py)
		args += " --build-arg PY_VER_MICRO=.6"

	if (cfg.os == OS_LINUX)
		args += ' --build-arg USER_ID=$(id -u) --build-arg GROUP_ID=$(id -g)'
	return args
}

// for conda builds:
// 1. we install arcgis in an extra layer to filter out the yet unsupported Python 3.10
// 2. we want to install it after env creation anyways to avoid the conda resolver blowing up
String getTargetArgs(cfg) {
	String args = ''
	if (cfg.py == PY310.py && cfg.kind == CONDA.kind)
		args = '--target req_install'
	return args
}
